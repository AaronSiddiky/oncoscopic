import { NextResponse } from 'next/server';
// @ts-ignore
import PDFDocument from 'pdfkit/js/pdfkit.standalone.js';

export async function POST(request: Request): Promise<Response> {
  try {
    const { predictedClass, confidence, llmResponse, imageUrl } = await request.json();
    
    // Validate required fields
    if (!predictedClass || confidence === undefined) {
      console.error('Missing required fields:', { predictedClass, confidence });
      return NextResponse.json(
        { error: 'Missing required fields for report generation' },
        { status: 400 }
      );
    }

    return await new Promise<Response>((resolve, reject) => {
      try {
        // Create a PDF document with Courier font (built into standalone version)
        const doc = new PDFDocument({
          autoFirstPage: true,
          size: 'A4',
          margin: 50,
          font: 'Courier',
          bufferPages: true,
          info: {
            Title: 'Skin Lesion Analysis Report',
            Author: 'Oncoscopic AI',
            Subject: 'Medical Analysis Report',
          }
        });
        
        const chunks: Buffer[] = [];

        // Collect PDF data chunks
        doc.on('data', (chunk: Buffer) => {
          try {
            chunks.push(chunk);
          } catch (error) {
            console.error('Error collecting PDF chunk:', error);
            reject(new NextResponse(JSON.stringify({ error: 'Failed to collect PDF chunk' }), { status: 500 }));
          }
        });
        
        // Add error handler for PDF generation
        doc.on('error', (err: Error) => {
          console.error('PDFDocument error:', err);
          reject(new NextResponse(JSON.stringify({ error: 'PDF generation error' }), { status: 500 }));
        });

        // Handle end of document
        doc.on('end', () => {
          try {
            console.log('PDF generation completed, concatenating chunks...');
            const pdfBuffer = Buffer.concat(chunks);
            console.log('PDF buffer created, size:', pdfBuffer.length);

            // Create response with proper headers
            const response = new NextResponse(pdfBuffer, {
              status: 200,
              headers: {
                'Content-Type': 'application/pdf',
                'Content-Length': pdfBuffer.length.toString(),
                'Content-Disposition': 'attachment; filename=skin-lesion-report.pdf'
              }
            });

            resolve(response);
          } catch (error) {
            console.error('Error in end event handler:', error);
            reject(new NextResponse(JSON.stringify({ error: 'Failed to create PDF response' }), { status: 500 }));
          }
        });

        // Write content to PDF using Courier font
        // Title
        doc.fontSize(24)
           .text('SKIN LESION ANALYSIS REPORT', {
             align: 'center'
           })
           .moveDown(2);

        // Date
        doc.fontSize(14)
           .text(`Report Generated: ${new Date().toLocaleString()}`)
           .moveDown(2);

        // Analysis Results section
        doc.fontSize(18)
           .text('ANALYSIS RESULTS', { underline: true })
           .moveDown();

        // Prediction details
        doc.fontSize(12)
           .text(`Predicted Condition: ${predictedClass.toUpperCase()}`, { continued: true })
           .moveDown()
           .text(`Confidence Level: ${confidence.toFixed(2)}%`)
           .moveDown(2);

        // Medical Assessment section
        if (llmResponse) {
          doc.fontSize(18)
             .text('MEDICAL ASSESSMENT', { underline: true })
             .moveDown();

          doc.fontSize(12)
             .text(llmResponse, {
               paragraphGap: 10,
               align: 'justify'
             })
             .moveDown(2);
        }

        // Credit line
        doc.moveDown()
           .fontSize(10)
           .fillColor('#666666')  // Dark gray color
           .text('Developed by Aaron Siddiky and Hilal Tokat at Columbia University', {
             align: 'center',
             paragraphGap: 10
           })
           .moveDown(2);

        // Disclaimer section
        doc.fontSize(10)
           .fillColor('gray')
           .text('DISCLAIMER', { underline: true })
           .moveDown()
           .text('This report is generated by an AI system and should not be considered as a substitute for professional medical advice. Please consult with a qualified healthcare provider for proper diagnosis and treatment.', {
             align: 'justify',
             paragraphGap: 10
           });

        // End the document
        doc.end();
      } catch (error) {
        console.error('Error in PDF generation:', error);
        reject(new NextResponse(JSON.stringify({ error: 'Failed to generate PDF' }), { status: 500 }));
      }
    });
  } catch (error) {
    console.error('Error in report generation:', error);
    return NextResponse.json(
      { error: 'Failed to generate PDF report', details: error instanceof Error ? error.message : String(error) },
      { status: 500 }
    );
  }
} 